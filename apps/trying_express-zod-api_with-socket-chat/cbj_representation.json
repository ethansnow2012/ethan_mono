[
  {
    "path": "/Users/kaoethan/gitFolder/myMono/packages/trying_express-zod-api/package.json",
    "content": "{\n  \"name\": \"trying_express-zod-api\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"socket\": \"ts-node-dev --respawn --transpile-only src/socket/__poc__/index.ts\",\n    \"dev\": \"ts-node-dev --respawn --transpile-only src/index.ts\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.19.2\",\n    \"express-zod-api\": \"^19.0.0\",\n    \"http-errors\": \"^2.0.0\",\n    \"socket.io\": \"^4.7.5\",\n    \"typescript\": \"^5.4.5\",\n    \"zod\": \"^3.23.8\",\n    \"zod-sockets\": \"^1.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/express\": \"^4.17.21\",\n    \"@types/http-errors\": \"^2.0.4\",\n    \"@types/node\": \"^20.12.8\"\n  }\n}\n"
  },
  {
    "path": "/Users/kaoethan/gitFolder/myMono/packages/trying_express-zod-api/src/config.ts",
    "content": "import { createConfig } from \"express-zod-api\";\n\nexport const config = createConfig({\n  server: {\n    listen: 8080, // port, UNIX socket or options\n  },\n  cors: true,\n  logger: { level: \"debug\", color: true },\n});"
  },
  {
    "path": "/Users/kaoethan/gitFolder/myMono/packages/trying_express-zod-api/src/endpoint.ts",
    "content": "import { z } from \"zod\";\nimport { defaultEndpointsFactory } from \"express-zod-api\";\nimport { authMiddleware } from \"./middleware\";\nimport { withErrorHandleWrapper } from \"./errors\";\n\n\nexport const helloWorldEndpoint = defaultEndpointsFactory.build({\n  method: \"get\", \n  input: z.object({\n    name: z.string().optional(),\n  }),\n  output: z.object({\n    greetings: z.string(),\n  }),\n  handler: withErrorHandleWrapper(async ({ input: { name }, options, logger }) => {\n    logger.debug(\"Options:\", options); // middlewares provide options\n    return { greetings: `Hello, ${name || \"World\"}. Happy coding!` };\n  }),\n});\n\nexport const authNeededEndpoint = defaultEndpointsFactory.addMiddleware(authMiddleware).build({\n    method: \"get\",\n    input: z.object({\n        key: z.string().min(1),\n    }),\n    output: z.object({}),\n    handler: withErrorHandleWrapper(async ({ input: { key }, options, logger }) => {\n        logger.debug(\"Options:\", options); // middlewares provide options\n        return { greetings: `Hello, ${key}. Valid!` };\n      }),\n})\n\nexport const justThrowError = defaultEndpointsFactory.build({\n    method: \"get\",\n    input: z.object({}),\n    output: z.object({}),\n    handler: withErrorHandleWrapper(async () => {\n        throw new Error(\"This is an error\")\n    }),\n})\n\n"
  },
  {
    "path": "/Users/kaoethan/gitFolder/myMono/packages/trying_express-zod-api/src/errors.ts",
    "content": "import createHttpError from \"http-errors\";\n\nexport function notFound(message = 'Not Found') {\n    return createHttpError(404, message);\n}\n\nexport function unauthorized(message = 'Unauthorized') {\n    return createHttpError(401, message);\n}\n\nexport function internalServerError(message = 'Internal Server Error') {\n    return createHttpError(500, message);\n}\n\nexport function invalidKey(message = 'Invalid key') {\n    return createHttpError(401, \"\");\n}\n\ntype HandlerType = (args: any) => Promise<any>;\n\nfunction combineDecorators(...decorators: Array<(handler: HandlerType) => HandlerType>) {\n    return function(handler: HandlerType) {\n        return decorators.reduce((wrapped, decorator) => decorator(wrapped), handler);\n    };\n}\n\nfunction withErrorLogging(handler: HandlerType) {\n    return async function(args: any) {\n        try {\n            return await handler(args);\n        } catch (error) {\n            console.log(`Error in handler:`, error);\n            // Optionally, you could handle the error further, e.g., by throwing a specific HTTP error.\n            throw error; // rethrow the error if you want calling code to handle it as well.\n        }\n    };\n}\nfunction withEmailAlert(handler: HandlerType) {\n    return async function(args: any) {\n        try {\n            return await handler(args);\n        } catch (error) {\n            console.log(`Pretending to send email...`);\n            throw error; // rethrow the error if you want calling code to handle it as well.\n        }\n    };\n}\n\n\n// Using the compose function\nexport const withErrorHandleWrapper = combineDecorators(withEmailAlert, withErrorLogging);"
  },
  {
    "path": "/Users/kaoethan/gitFolder/myMono/packages/trying_express-zod-api/src/index.ts",
    "content": "import { createServer } from \"express-zod-api\";\nimport { config } from \"./config\";\nimport { routing } from \"./routing\";\n\nimport { socketModule } from \"./socket\";\nimport { attachSockets } from \"zod-sockets\";\n\n/**\n * \"await\" is only needed for using entities retuned from this method.\n * If you can not use await (on the top level of CJS), use IIFE wrapper:\n * @example (async () => { await ... })()\n * */\n(async()=>{\n    try {\n        const { httpServer, httpsServer } = await createServer(config, routing)\n        attachSockets({ \n            io: socketModule.io,\n            config: socketModule.config,\n            actions: [socketModule.onPing],\n            target: httpsServer || httpServer \n        })\n    } catch (error) {\n        console.error(\"Error starting the server\", error);\n    }\n})()"
  },
  {
    "path": "/Users/kaoethan/gitFolder/myMono/packages/trying_express-zod-api/src/middleware.ts",
    "content": "import { z } from \"zod\";\nimport { invalidKey } from \"./errors\";\nimport { createMiddleware } from \"express-zod-api\";\n\nexport const authMiddleware = createMiddleware({\n  security: {\n    // this information is optional and used for generating documentation\n    and: [\n      { type: \"input\", name: \"key\" },\n      { type: \"header\", name: \"token\" },\n    ],\n  },\n  input: z.object({\n    key: z.string().min(4),\n  }),\n  middleware: async ({ input: { key }, request, logger }) => {\n    logger.debug(\"Checking the key and token\");\n    const user = key\n    if (!user) {\n      throw invalidKey()\n    }\n    return { user }; // provides endpoints with options.user\n  },\n});"
  },
  {
    "path": "/Users/kaoethan/gitFolder/myMono/packages/trying_express-zod-api/src/routing.ts",
    "content": "import { Routing } from \"express-zod-api\";\nimport { \n    helloWorldEndpoint,\n    authNeededEndpoint,\n    justThrowError\n} from \"./endpoint\";\n\n\nexport const routing: Routing = {\n  //\"\":helloWorldEndpoint,\n  v1: {\n    hello: helloWorldEndpoint,\n    authByKey: authNeededEndpoint,\n    justThrowError:justThrowError\n  },\n};"
  },
  {
    "path": "/Users/kaoethan/gitFolder/myMono/packages/trying_express-zod-api/src/socket/__poc__/index.ts",
    "content": "import { createSimpleConfig } from \"zod-sockets\";\nimport { ActionsFactory } from \"zod-sockets\";\nimport { z } from \"zod\";\nimport http from \"node:http\";\nimport { Server } from \"socket.io\";\nimport { attachSockets } from \"zod-sockets\";\n\nconst config = createSimpleConfig(); // shorthand for root namespace only\nconst actionsFactory = new ActionsFactory(config);\n\nconst onPing = actionsFactory.build({\n    event: \"ping\",\n    input: z.tuple([]).rest(z.unknown()),\n    output: z.tuple([z.literal(\"pong\")]).rest(z.unknown()),\n    handler: async ({ input }) => [\"pong\", ...input] as const,\n});\n\nattachSockets({\n  /** @see https://socket.io/docs/v4/server-options/ */\n  io: new Server(),\n  config: config,\n  actions: [onPing],\n  target: http.createServer().listen(8090),\n});\n\n/**\n * curl \"http://localhost:8090/socket.io/?EIO=4&transport=polling\" \n * =====>> {\"sid\":\"eAs7EK0OJn0NteO9AAAC\",\"upgrades\":[\"websocket\"],\"pingInterval\":25000,\"pingTimeout\":20000,\"maxPayload\":1000000}%                          \n */"
  },
  {
    "path": "/Users/kaoethan/gitFolder/myMono/packages/trying_express-zod-api/src/socket/index.ts",
    "content": "import { createSimpleConfig } from \"zod-sockets\";\nimport { ActionsFactory } from \"zod-sockets\";\nimport { z } from \"zod\";\nimport { Server } from \"socket.io\";\n\nconst config = createSimpleConfig(); // shorthand for root namespace only\nconst actionsFactory = new ActionsFactory(config);\n\nconst onPing = actionsFactory.build({\n    event: \"ping\",\n    input: z.tuple([]).rest(z.unknown()),\n    output: z.tuple([z.literal(\"pong\")]).rest(z.unknown()),\n    handler: async ({ input }) => [\"pong\", ...input] as const,\n});\n\n/** @see https://socket.io/docs/v4/server-options/ */\nexport const socketModule = {\n    config,\n    actionsFactory,\n    onPing,\n    io:new Server()\n}\n\n\n"
  },
  {
    "path": "/Users/kaoethan/gitFolder/myMono/packages/trying_express-zod-api/tsconfig.json",
    "content": "{\n    \"compilerOptions\": {\n      \"strict\": true,\n      \"skipLibCheck\": true,\n      \"esModuleInterop\": true\n    }\n}\n"
  }
]